name: Redeploy MySQL via Portainer GitOps
on:
  push:
    branches:
      - main
    paths:
      - 'mysql-compose.yml'
  workflow_dispatch:
  workflow_call:
    inputs:
      branch_name:
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install WireGuard
        run: |
          sudo apt-get update
          sudo apt-get install -y wireguard 
      - name: Write WireGuard config
        run: |
          echo "${{ secrets.WG_CONFIG }}" > wg0.conf

      - name: Bring up VPN
        run: |
          sudo wg-quick up ./wg0.conf
          sudo wg show
          
      - name: Override system DNS resolver
        run: |
          sudo rm /etc/resolv.conf
          echo "nameserver 1.1.1.1" | sudo tee /etc/resolv.conf
          
      - name: Authenticate to Portainer
        id: auth
        run: |
          RESPONSE=$(curl -X POST "http://${{ vars.RPI4_IP }}:83/api/auth" \
            -H "Content-Type: application/json" \
            -d '{
                 "Username":"${{ vars.APP_USER }}",
                 "Password":"${{ secrets.APP_PASSWORD }}"
                 }')
          TOKEN=$(echo "$RESPONSE" | jq -r '.jwt')
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Get Stack ID (if exists)
        id: get_stack_id
        run: |
          STACKS=$(curl --fail -s -X GET "http://${{ vars.RPI4_IP }}:83/api/stacks" \
          -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" || echo "")

          STACK_ID=$(echo "$STACKS" | jq -r '.[] | select(.Name=="mysql") | .Id')
          
          if [ -z "$STACK_ID" ]; then
            echo "Stack not found."
            echo "stack_id=0" >> $GITHUB_OUTPUT
          else
            echo "Stack found with ID: $STACK_ID"
            echo "stack_id=$STACK_ID" >> $GITHUB_OUTPUT
          fi

      - name: Get Portainer EndpointId
        id: endpoint
        run: |
          RESPONSE=$(curl -s -X GET "http://${{ vars.RPI4_IP }}:83/api/endpoints" \
            -H "Authorization: Bearer ${{ steps.auth.outputs.token }}")
          ENDPOINT_ID=$(echo "$RESPONSE" | jq '.[0].Id')
          echo "endpoint_id=$ENDPOINT_ID" >> $GITHUB_OUTPUT

      - name: Create Stack from GitHub
        if: ${{ steps.get_stack_id.outputs.stack_id == '0' }}
        run: |
          echo "Creating stack from GitHub..."
          RESPONSE=$(curl -v -s -S -X POST "http://${{ vars.RPI4_IP }}:83/api/stacks/create/standalone/repository?endpointId=${{ steps.endpoint.outputs.endpoint_id }}" \
          -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" \
          -H "Content-Type: application/json" \
          -d '{
               "Name": "mysql",
               "RepositoryURL": "https://github.com/liamj-f/homelab-setup",
               "RepositoryReferenceName": "${{ inputs.branch_name }}",
               "ComposeFile": "mysql-compose.yml",
               "RepositoryAuthentication": false,
               "AutoUpdate": {
                              "forcePullImage": true,
                              "forceUpdate": true,
                              "Webhook": "d8e18d38-8ade-45b9-a226-7487d6780865"
                             },
               "Env": [
                       {
                       "name":"MYSQL_ROOT_PASSWORD",
                       "value":"${{ secrets.MYSQL_ROOT_PASSWORD }}"
                       }
               ],
               "Prune": true,
               "StackFileVersion": "3"
              }')

            echo "API Response: $RESPONSE"
            echo "stack_response=$RESPONSE" >> $GITHUB_OUTPUT

      - name: Update Stack
        if: ${{ steps.get_stack_id.outputs.stack_id != '0' }}
        run: |
          curl -s -X PUT "http://${{ vars.RPI4_IP }}:83/api/stacks/${{ steps.get_stack_id.outputs.stack_id }}/git/redeploy?endpointId=${{ steps.endpoint.outputs.endpoint_id }}" \
          -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" \
          -H "Content-Type: application/json" \
          -d '{
               "PullImage": true,
               "RepositoryReferenceName": "${{ inputs.branch_name }}",
               "repositoryAuthentication": false,
               "Env": [
                       {
                       "name":"MYSQL_ROOT_PASSWORD",
                       "value":"${{ secrets.MYSQL_ROOT_PASSWORD }}"
                       }
                       ],
               "Prune": true
              }'
      - name: Deploy new user
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.RPI4_IP }}
          username: ${{ vars.RPI4_USER }}
          password: ${{ secrets.RPI4_PASSWORD }}
          script: |
            # Wait for MySQL to be ready
            sudo docker exec mysql sh -c "until mysqladmin ping -uroot --password='${{ secrets.MYSQL_ROOT_PASSWORD }}' --silent; do
              echo 'Waiting for MySQL to be ready...'
              sleep 3
            done"
            
            sudo docker exec -i mysql \
            mysql -uroot --password="${{ secrets.MYSQL_ROOT_PASSWORD }}"  -e " \
              CREATE USER IF NOT EXISTS '${{ vars.APP_USER }}'@'%' IDENTIFIED BY '${{ secrets.APP_PASSWORD }}'; \
              GRANT ALL PRIVILEGES ON *.* TO '${{ vars.APP_USER }}'@'%' with grant option; \
              FLUSH PRIVILEGES;"
              
      - name: Bring down VPN
        run: |
          sudo wg-quick down ./wg0.conf
          sudo wg show   
          
