name: Redeploy Nginx via Portainer GitOps
on:
  push:
    branches:
      - main
    paths:
      - 'nginx-compose.yml'
  workflow_dispatch:
  workflow_call:
    inputs:
      branch_name:
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install WireGuard
        run: |
          sudo apt-get update
          sudo apt-get install -y wireguard 

      - name: Write WireGuard config
        run: |
          echo "${{ secrets.WG_CONFIG }}" > wg0.conf

      - name: Bring up VPN
        run: |
          sudo wg-quick up ./wg0.conf
          sudo wg show
          
      - name: Override system DNS resolver
        run: |
          sudo rm /etc/resolv.conf
          echo "nameserver 1.1.1.1" | sudo tee /etc/resolv.conf
          
      - name: Authenticate to Portainer
        id: auth
        run: |
          RESPONSE=$(curl -X POST "http://${{ vars.RPI4_IP }}:83/api/auth" \
            -H "Content-Type: application/json" \
            -d '{
                 "Username":"${{ vars.APP_USER }}",
                 "Password":"${{ secrets.APP_PASSWORD }}"
                 }')
          TOKEN=$(echo "$RESPONSE" | jq -r '.jwt')
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Get Stack ID (if exists)
        id: get_stack_id
        run: |
          STACKS=$(curl --fail -s -X GET "http://${{ vars.RPI4_IP }}:83/api/stacks" \
          -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" || echo "")

          STACK_ID=$(echo "$STACKS" | jq -r '.[] | select(.Name=="nginx") | .Id')
          
          if [ -z "$STACK_ID" ]; then
            echo "Stack not found."
            echo "stack_id=0" >> $GITHUB_OUTPUT
          else
            echo "Stack found with ID: $STACK_ID"
            echo "stack_id=$STACK_ID" >> $GITHUB_OUTPUT
          fi

      - name: Get Portainer EndpointId
        id: endpoint
        run: |
          RESPONSE=$(curl -s -X GET "http://${{ vars.RPI4_IP }}:83/api/endpoints" \
            -H "Authorization: Bearer ${{ steps.auth.outputs.token }}")
          ENDPOINT_ID=$(echo "$RESPONSE" | jq '.[0].Id')
          echo "endpoint_id=$ENDPOINT_ID" >> $GITHUB_OUTPUT

      - name: Create Stack from GitHub
        if: ${{ steps.get_stack_id.outputs.stack_id == '0' }}
        run: |
          echo "Creating stack from GitHub..."
          RESPONSE=$(curl -v -s -S -X POST "http://${{ vars.RPI4_IP }}:83/api/stacks/create/standalone/repository?endpointId=${{ steps.endpoint.outputs.endpoint_id }}" \
          -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" \
          -H "Content-Type: application/json" \
          -d '{
               "Name": "nginx",
               "RepositoryURL": "https://github.com/liamj-f/homelab-setup",
               "RepositoryReferenceName": "${{ inputs.branch_name }}",
               "ComposeFile": "nginx-compose.yml",
               "RepositoryAuthentication": false,
               "AutoUpdate": {
                              "forcePullImage": true,
                              "forceUpdate": true,
                              "Webhook": "e0ac1738-d609-4ef9-9865-2c73be74fbc0"
                             },
               "Env": [
                       {
                       "name":"INITIAL_ADMIN_EMAIL",
                       "value":"${{ vars.NGINX_EMAIL }}"
                       },
                       {
                       "name":"INITIAL_ADMIN_PASSWORD",
                       "value":"${{ secrets.APP_PASSWORD }}"
                       }
               ],
               "Prune": true,
               "StackFileVersion": "3"
              }')

            echo "API Response: $RESPONSE"
            echo "stack_response=$RESPONSE" >> $GITHUB_OUTPUT

      - name: Update Stack
        if: ${{ steps.get_stack_id.outputs.stack_id != '0' }}
        run: |
          curl -s -X PUT "http://${{ vars.RPI4_IP }}:83/api/stacks/${{ steps.get_stack_id.outputs.stack_id }}/git/redeploy?endpointId=${{ steps.endpoint.outputs.endpoint_id }}" \
          -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" \
          -H "Content-Type: application/json" \
          -d '{
               "PullImage": true,
               "RepositoryReferenceName": "${{ inputs.branch_name }}",
               "repositoryAuthentication": false,
               "Env": [
                       {
                       "name":"INITIAL_ADMIN_EMAIL",
                       "value":"${{ vars.NGINX_EMAIL }}"
                       },
                       {
                       "name":"INITIAL_ADMIN_PASSWORD",
                       "value":"${{ secrets.APP_PASSWORD }}"
                       }
                       ],
               "Prune": true
              }'               

      - name: Authenticate as nginx user
        id: token
        run: |
          sleep 20
            RESPONSE=$(curl -s -X POST "http://${{ vars.RPI4_IP }}:81/api/tokens" \
              -H "Content-Type: application/json" \
              -d '{
                   "identity":"${{ vars.NGINX_EMAIL }}",
                   "secret":"${{ secrets.APP_PASSWORD }}"
                   }')
        
            TOKEN=$(echo "$RESPONSE" | jq -r '.token // empty')
            echo "token=$TOKEN" >> $GITHUB_OUTPUT
            
      - name: Create Proxy Hosts
        run: |
          TOKEN="${{ steps.token.outputs.token }}"
          declare -A hosts
          hosts["tplink.14monarch.local"]="192.168.0.1:80"
          hosts["nginx.14monarch.local"]="${{ vars.RPI4_IP }}:81"
          hosts["pihole.14monarch.local"]="${{ vars.RPI4_IP }}:82"
          hosts["portainer.14monarch.local"]="${{ vars.RPI4_IP }}:83"
          hosts["adminer.14monarch.local"]="${{ vars.RPI4_IP }}:84"
          hosts["nextcloud.14monarch.local"]="${{ vars.RPI4_IP }}:85"
          hosts["pihole0.14monarch.local"]=${{ vars.RPI0_IP }}:82"
          
          for domain in "${!hosts[@]}"; do
            host="${hosts[$domain]}"
            host_ip="${host%%:*}"
            host_port="${host##*:}"

            curl -s -X POST "http://${{ vars.RPI4_IP }}:81/api/nginx/proxy-hosts" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                "domain_names": ["'"$domain"'"],
                "forward_host": "'"$host_ip"'",
                "forward_port": '"$host_port"',
                "forward_scheme": "http",
                "ssl_forced": false,
                "enabled": true
              }' | jq
          done
      - name: Bring down VPN
        run: |
          sudo wg-quick down ./wg0.conf
          sudo wg show
