name: Redeploy Nginx via Portainer GitOps
on:
  push:
    branches:
      - main
    paths:
      - 'nginx-compose.yml'
  workflow_dispatch:
  workflow_call:
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install WireGuard
        run: |
          sudo apt-get update
          sudo apt-get install -y wireguard resolvconf
      - name: Write WireGuard config
        run: |
          echo "${{ secrets.WG_CONFIG }}" > wg0.conf
      - name: Resolve DDNS and update wg0.conf
        run: |
          sudo apt-get update && sudo apt-get install -y dnsutils
          ip=$(dig +short 14monarch.tplinkdns.com @8.8.8.8 | tail -n1)
          if [ -z "$ip" ]; then
          echo "‚ùå Failed to resolve 14monarch.tplinkdns.com"
          exit 1
          fi
          echo "‚úÖ Resolved 14monarch.tplinkdns.com to $ip"
          sudo sed -i "s|14monarch.tplinkdns.com|$ip|" wg0.conf
          echo "üîß Updated wg0.conf to use $ip instead of DDNS"
      - name: Bring up VPN
        run: |
          sudo wg-quick up ./wg0.conf
          sudo wg show

      - name: Authenticate to Portainer
        id: auth
        run: |
          RESPONSE=$(curl -X POST "192.168.0.2:83/api/auth" \
            -H "Content-Type: application/json" \
            -d "{\"Username\": \"${{ secrets.PORTAINER_USER }}\", \"Password\": \"${{ secrets.PORTAINER_PASSWORD }}\"}")
          TOKEN=$(echo "$RESPONSE" | grep -oP '(?<="jwt":")[^"]+')
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Check if Stack Exists
        id: check_stack
        run: |
          STACKS=$(curl --fail -X GET "http://192.168.0.2:83/api/stacks" \
          -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" || echo "")
          EXISTS=$(echo "$STACKS" | grep -c '"Name":"Nginx"' || true)
          echo "stack_exists=$EXISTS" >> $GITHUB_OUTPUT

      - name: Create Stack from GitHub
        if: steps.check_stack.outputs.stack_exists == '0'
        run: |
          echo "Creating stack from GitHub..."
          curl -X POST "192.168.0.2:83/api/stacks?type=1&method=repository&endpointId=1" \
            -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" \
            -H "Content-Type: application/json" \
            -d '{
              "Name": "nginx",
              "RepositoryURL": "https://github.com/liamj-f/rpi4-docker",
              "RepositoryReferenceName": "refs/heads/main",
              "ComposeFilePath": "nginx-compose.yml",
              "RepositoryAuthentication": false,
              "AutoUpdate": {
              "Webhook": true
              }
            }'

      - name: Trigger Webhook
        run: |
          echo "Triggering webhook..."
          STACKS=$(curl -X GET "${{ secrets.PORTAINER_URL }}/api/stacks" \
            -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" || true)
          WEBHOOK_ID=$(echo "$STACKS" | grep -oP '"WebhookID":"\K[^"]+' | head -n 1)
          curl -s -X POST "192.168.0.2:83/api/stacks/webhooks/$WEBHOOK_ID"

      - name: Authenticate as nginx user
        id: token
        run: |
          RESPONSE=$(curl -X POST "http://192.168.0.2:81/api/tokens" \
            -H "Content-Type: application/json" \
            -d "{\"identity\":\"${{ secrets.NGINX_EMAIL }}\",\"secret\":\"${{ secrets.NGINX_PASSWORD }}\"}")
          TOKEN=$(echo "$RESPONSE" | grep -oP '"token"\s*:\s*"\K[^"]+')
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
        
      - name: Create Proxy Hosts
        run: |
          TOKEN="${{ steps.token.outputs.token }}"
          declare -A hosts
          hosts["nginx.14monarch.local"]="192.168.0.2:81"
          hosts["pihole.14monarch.local"]="192.168.0.2:82"
          hosts["portainer.14monarch.local"]="192.168.0.2:83"
          hosts["nextcloud.14monarch.local"]="192.168.0.2:84"
          hosts["tplink.14monarch.local"]="192.168.0.1:80"

          for domain in "${!hosts[@]}"; do
            host="${hosts[$domain]}"
            host_ip="${host%%:*}"
            host_port="${host##*:}"

            curl -s -X POST "http://192.168.0.2:81/api/nginx/proxy-hosts" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                "domain_names": ["'"$domain"'"],
                "forward_host": "'"$host_ip"'",
                "forward_port": '"$host_port"',
                "forward_scheme": "http",
                "ssl_forced": false,
                "enabled": true
              }' | jq
          done
