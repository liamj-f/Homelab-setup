name: Redeploy Pihole via Portainer GitOps
on:
  push:
    branches:
      - main
    paths:
      - 'pihole-compose.yml'
  workflow_dispatch:
  workflow_call:
    inputs:
      branch_name:
        required: true
        type: string
        
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install WireGuard
        run: |
          sudo apt-get update
          sudo apt-get install -y wireguard
          
      - name: Write WireGuard config
        run: |
          echo "${{ secrets.WG_CONFIG }}" > wg0.conf

      - name: Bring up VPN
        run: |
          sudo wg-quick up ./wg0.conf
          sudo wg show
          
      - name: Override system DNS resolver
        run: |
          sudo rm /etc/resolv.conf
          echo "nameserver 1.1.1.1" | sudo tee /etc/resolv.conf
          
      - name: Authenticate to Portainer
        id: auth
        run: |
          RESPONSE=$(curl -X POST "${{ vars.RPI4_IP }}:83/api/auth" \
            -H "Content-Type: application/json" \
            -d '{
                 "Username":"${{ vars.APP_USER }}", 
                 "Password":"${{ secrets.APP_PASSWORD }}"
                }')
          TOKEN=$(echo "$RESPONSE" | jq -r '.jwt')
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Get Stack ID (if exists)
        id: get_stack_id
        run: |
          STACKS=$(curl --fail -s -X GET "http://${{ vars.RPI4_IP }}:83/api/stacks" \
          -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" || echo "")

          STACK_ID=$(echo "$STACKS" | jq -r '.[] | select(.Name=="pihole") | .Id')
          
          if [ -z "$STACK_ID" ]; then
            echo "Stack not found."
            echo "stack_id=0" >> $GITHUB_OUTPUT
          else
            echo "Stack found with ID: $STACK_ID"
            echo "stack_id=$STACK_ID" >> $GITHUB_OUTPUT
          fi

      - name: Get Portainer EndpointId
        id: endpoint
        run: |
          RESPONSE=$(curl -s -X GET "http://${{ vars.RPI4_IP }}:83/api/endpoints" \
            -H "Authorization: Bearer ${{ steps.auth.outputs.token }}")
          ENDPOINT_ID=$(echo "$RESPONSE" | jq '.[0].Id')
          echo "endpoint_id=$ENDPOINT_ID" >> $GITHUB_OUTPUT

      - name: Create Stack from GitHub
        if: ${{ steps.get_stack_id.outputs.stack_id == '0' }}
        run: |
          echo "Creating stack from GitHub..."
          RESPONSE=$(curl -v -s -S -X POST "http://${{ vars.RPI4_IP }}:83/api/stacks/create/standalone/repository?endpointId=${{ steps.endpoint.outputs.endpoint_id }}" \
          -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" \
          -H "Content-Type: application/json" \
          -d '{
               "Name": "pihole",
               "RepositoryURL": "https://github.com/liamj-f/homelab-setup",
               "RepositoryReferenceName": "${{ github.ref }}",
               "ComposeFile": "pihole/pihole-compose.yml",
               "RepositoryAuthentication": false,
               "AutoUpdate": {
                              "forcePullImage": true,
                              "forceUpdate": true,
                              "Webhook": "e56041a2-75f6-4a10-85dc-c69424de631e"
                             },
               "Env": [
                       {
                        "name":"PIHOLE_WEBPASSWORD",
                        "value":"${{ secrets.APP_PASSWORD }}"
                        },
                       {
                        "name":"RPI4_IP",
                        "value":"${{ vars.RPI4_IP }}"
                        },
                        {
                        "name":"RPI0_IP",
                        "value":"${{ vars.RPI0_IP }}"
                        }                    
               ],
               "Prune": true,
               "StackFileVersion": "3"
              }')

            echo "API Response: $RESPONSE"
            echo "stack_response=$RESPONSE" >> $GITHUB_OUTPUT

      - name: Update Stack
        if: ${{ steps.get_stack_id.outputs.stack_id != '0' }}
        run: |
          curl -s -X PUT "http://${{ vars.RPI4_IP }}:83/api/stacks/${{ steps.get_stack_id.outputs.stack_id }}/git/redeploy?endpointId=${{ steps.endpoint.outputs.endpoint_id }}" \
          -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" \
          -H "Content-Type: application/json" \
          -d '{
               "PullImage": true,
               "RepositoryReferenceName": "${{ github.ref }}",
               "repositoryAuthentication": false,
               "Env": [
                       {
                        "name":"PIHOLE_WEBPASSWORD",
                        "value":"${{ secrets.APP_PASSWORD }}"
                        },
                       {
                        "name":"RPI4_IP",
                        "value":"${{ vars.RPI4_IP }}"
                        },
                        {
                        "name":"RPI0_IP",
                        "value":"${{ vars.RPI0_IP }}"
                        }                    
               ],
               "Prune": true
              }'          
    
#      - name: Trigger stack redeploy via webhook
#        run: |
#          echo "Triggering stack redeploy via webhook..."
#          RESPONSE=$(curl -s -w "HTTP %{http_code}" -X POST "http://192.168.0.2:83/api/stacks/webhooks/e56041a2-75f6-4a10-85dc-c69424de631e")
#          echo "$RESPONSE"

      - name: Pihole Api Auth
        id: pihole_auth
        run: |
          sleep 20
          RESPONSE=$(curl -s -X POST "http://${{ vars.RPI4_IP }}:82/api/auth" \
              -H "Content-Type: application/json" \
              -d '{
                  "password": "${{ secrets.APP_PASSWORD }}"
                  }' )

          CSRF=$(echo "$RESPONSE" | jq -r '.session.csrf')
          SID=$(echo "$RESPONSE" | jq -r '.session.sid')
          echo "sid=$SID" >> $GITHUB_OUTPUT
          echo "csrf=$CSRF" >> $GITHUB_OUTPUT         

        
      - name: Add DNS records to Pihole via API
        run: |
          curl -X PATCH "http://${{ vars.RPI4_IP }}:82/api/config" \
          -H "X-FTL-SID: ${{ steps.pihole_auth.outputs.sid }}" \
          -H "X-FTL-CSRF: ${{ steps.pihole_auth.outputs.csrf }}" \
          -H 'accept: application/json' \
          -H 'content-type: application/json' \
          -d '{
              "config":{
                  "dns":{
                      "piholePTR":"Hostname",
                      "upstreams": [
                                    "1.1.1.1",
                                    "8.8.8.8"
                                    ],
                      "hosts":[
                              "${{ vars.RPI4_IP }} tplink.14monarch.local",
                              "${{ vars.RPI4_IP }} pihole.14monarch.local",
                              "${{ vars.RPI4_IP }} nginx.14monarch.local",
                              "${{ vars.RPI4_IP }} portainer.14monarch.local",
                              "${{ vars.RPI4_IP }} nextcloud.14monarch.local",
                              "${{ vars.RPI4_IP }} adminer.14monarch.local",
                              "${{ vars.RPI4_IP }} pih0le.14monarch.local"
                              ],
                      "interface": "eth0,wg0",
                      "listeningMode": "single"
                          },
                  "dhcp": {
                        "active": false,
                        "start": "192.168.0.10",
                        "end": "192.168.0.255",
                        "router": "192.168.0.1",
                        "netmask": "",
                        "leaseTime": "6h",
                        "ipv6": false,
                        "rapidCommit": false,
                        "multiDNS": true,
                        "logging": false,
                        "ignoreUnknownClients": false,
                        "hosts": [
                                  "DC-A6-32-C8-BB-41,192.168.0.2,liam-pi4,infinite",
                                  "B8-27-EB-3A-5D-2A,192.168.0.3,liam-pi0,infinite"
                                 ]
                          } 
                    }
                }'
      - name: Add Blocklists to Pihole via API
        run: |
          curl -X POST "http://${{ vars.RPI4_IP }}:82/api/lists?type=block" \
          -H "X-FTL-SID: ${{ steps.pihole_auth.outputs.sid }}" \
          -H "X-FTL-CSRF: ${{ steps.pihole_auth.outputs.csrf }}" \
          -H 'accept: application/json' \
          -H 'content-type: application/json' \
          -d '{
              "address": [
                          "https://v.firebog.net/hosts/Easylist.txt",
                          "https://media.githubusercontent.com/media/zachlagden/Pi-hole-Optimized-Blocklists/refs/heads/main/lists/advertising.txt",
                          "https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts"
                          ],
              "comment": "Added via API",
              "groups": [0],
              "enabled": true
              }'
      - name: Update Gravity via API
        run: |
          curl -X POST "http://${{ vars.RPI4_IP }}:82/api/action/gravity" \
          -H "X-FTL-SID: ${{ steps.pihole_auth.outputs.sid }}" \
          -H "X-FTL-CSRF: ${{ steps.pihole_auth.outputs.csrf }}" \
          -H 'accept: text/plain' \
          -H 'content-type: application/json' \
      - name: End Pihole API Session
        run: |
          curl -X DELETE "http://${{ vars.RPI4_IP }}:82/api/auth" \
          -H "X-FTL-SID: ${{ steps.pihole_auth.outputs.sid }}" \
          -H "X-FTL-CSRF: ${{ steps.pihole_auth.outputs.csrf }}" \
        
      - name: Bring down VPN
        run: |
          sudo wg-quick down ./wg0.conf
          sudo wg show   
