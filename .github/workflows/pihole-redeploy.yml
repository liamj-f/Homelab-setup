name: Redeploy Pihole via Portainer GitOps
on:
  push:
    branches:
      - main
    paths:
      - 'pihole-compose.yml'
  workflow_dispatch:
  workflow_call:
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install WireGuard
        run: |
          sudo apt-get update
          sudo apt-get install -y wireguard resolvconf dnsutils
      - name: Write WireGuard config
        run: |
          echo "${{ secrets.WG_CONFIG }}" > wg0.conf
      - name: Resolve DDNS and update wg0.conf
        run: |
          ip=$(dig +short 14monarch.tplinkdns.com @8.8.8.8 | tail -n1)
          if [ -z "$ip" ]; then
          echo "‚ùå Failed to resolve 14monarch.tplinkdns.com"
          exit 1
          fi
          echo "‚úÖ Resolved 14monarch.tplinkdns.com to $ip"
          sudo sed -i "s|14monarch.tplinkdns.com|$ip|" wg0.conf
          echo "üîß Updated wg0.conf to use $ip instead of DDNS"
      - name: Bring up VPN
        run: |
          sudo wg-quick up ./wg0.conf
          sudo wg show
          
      - name: Authenticate to Portainer
        id: auth
        run: |
          RESPONSE=$(curl -X POST "192.168.0.2:83/api/auth" \
            -H "Content-Type: application/json" \
            -d '{
                 "Username":"${{ secrets.PORTAINER_USER }}", 
                 "Password":"${{ secrets.PORTAINER_PASSWORD }}"
                }')
          TOKEN=$(echo "$RESPONSE" | grep -oP '(?<="jwt":")[^"]+')
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Get Stack ID (if exists)
        id: get_stack_id
        run: |
          STACKS=$(curl --fail -s -X GET "http://192.168.0.2:83/api/stacks" \
          -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" || echo "")

          STACK_ID=$(echo "$STACKS" | jq -r '.[] | select(.Name=="pihole") | .Id')
          
          if [ -z "$STACK_ID" ]; then
            echo "Stack not found."
            echo "stack_id=0" >> $GITHUB_OUTPUT
          else
            echo "Stack found with ID: $STACK_ID"
            echo "stack_id=$STACK_ID" >> $GITHUB_OUTPUT
          fi

      - name: Get Portainer EndpointId
        id: endpoint
        run: |
          RESPONSE=$(curl -s -X GET "http://192.168.0.2:83/api/endpoints" \
            -H "Authorization: Bearer ${{ steps.auth.outputs.token }}")
          ENDPOINT_ID=$(echo "$RESPONSE" | grep -oP '"Id":[0-9]+' | head -n1 | cut -d: -f2)
          echo "endpoint_id=$ENDPOINT_ID" >> $GITHUB_OUTPUT

      - name: Create Stack from GitHub
        if: ${{ steps.get_stack_id.outputs.stack_id == '0' }}
        run: |
          echo "Creating stack from GitHub..."
          RESPONSE=$(curl -v -s -S -X POST "http://192.168.0.2:83/api/stacks/create/standalone/repository?endpointId=${{ steps.endpoint.outputs.endpoint_id }}" \
          -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" \
          -H "Content-Type: application/json" \
          -d '{
               "Name": "pihole",
               "RepositoryURL": "https://github.com/liamj-f/rpi4-docker",
               "RepositoryReferenceName": "refs/heads/main",
               "ComposeFile": "pihole-compose.yml",
               "RepositoryAuthentication": false,
               "AutoUpdate": {
                              "forcePullImage": true,
                              "forceUpdate": true,
                              "Webhook": "e56041a2-75f6-4a10-85dc-c69424de631e"
                             },
               "Env": [
                       {
                        "name":"PIHOLE_WEBPASSWORD",
                        "value":"${{ secrets.PORTAINER_PASSWORD }}"
                        }
               ],
               "Prune": true,
               "StackFileVersion": "3"
              }')

            echo "API Response: $RESPONSE"
            echo "stack_response=$RESPONSE" >> $GITHUB_OUTPUT

      - name: Update Stack
        if: ${{ steps.get_stack_id.outputs.stack_id != '0' }}
        run: |
          curl -s -X PUT "http://192.168.0.2:83/api/stacks/${{ steps.get_stack_id.outputs.stack_id }}/git/redeploy?endpointId=${{ steps.endpoint.outputs.endpoint_id }}" \
          -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" \
          -H "Content-Type: application/json" \
          -d '{
               "PullImage": true,
               "RepositoryReferenceName": "refs/heads/main",
               "repositoryAuthentication": false,
               "Env": [
                       {
                        "name":"PIHOLE_WEBPASSWORD",
                        "value":"${{ secrets.PORTAINER_PASSWORD }}"
                        }
                       ],
               "Prune": true
              }'          
    
#      - name: Trigger stack redeploy via webhook
#        run: |
#          echo "Triggering stack redeploy via webhook..."
#          RESPONSE=$(curl -s -w "HTTP %{http_code}" -X POST "http://192.168.0.2:83/api/stacks/webhooks/e56041a2-75f6-4a10-85dc-c69424de631e")
#          echo "$RESPONSE"

      - name: Wait for Pihole API to be ready
        run: |
            echo "Waiting for Pihole API to be ready..."
            STATUS_CODE="000"
        
            for i in {1..20}; do
              # Run curl in a subshell so it doesn't kill the script on failure
              STATUS_CODE=$( (curl -s -o /dev/null -w "%{http_code}" http://192.168.0.2:82/api/auth) || echo "000" )
        
              if [ "$STATUS_CODE" != "000" ]; then
                echo "Pihole API is responding (HTTP $STATUS_CODE)"
                break
              fi
        
              echo "Attempt $i: Pihole not ready yet... retrying in 5s"
              sleep 5
            done
        
            if [ "$STATUS_CODE" = "000" ]; then
              echo "Pihole API did not respond after multiple retries. Failing job."
              exit 1
            fi
        
            RESPONSE=$(curl -s -X POST "http://192.168.0.2:82/api/auth" \
              -H "Content-Type: application/json" \
              -d "{
                "password": "${{ secrets.PORTAINER_PASSWORD }}"
                }")
        
            echo "csrf=$(echo "$RESPONSE" | jq -r '.session.csrf')" >> $GITHUB_OUTPUT
            echo "sid=$(echo "$RESPONSE" | jq -r '.session.sid')" >> $GITHUB_OUTPUT
          
      - name: Add DNS records to Pihole via API
        run: |
          curl -X PATCH "http://192.168.0.2:82/api/config" \
          -H "X-FTL-SID: ${{ steps.pihole_auth.outputs.sid }}" \
          -H "X-FTL-CSRF: ${{ steps.pihole_auth.outputs.csrf }}" \
          -H 'accept: application/json' \
          -H 'content-type: application/json' \
          -d '{
              "config":{
                  "dns":{
                      "piholePTR":"None",
                      "upstreams": [
                                    "1.1.1.1",
                                    "8.8.8.8"
                                    ],
                      "hosts":[
                              "192.168.0.1 tplink.14monarch.local",
                              "192.168.0.2 pihole.14monarch.local",
                              "192.168.0.2 nginx.14monarch.local",
                              "192.168.0.2 portainer.14monarch.local",
                              "192.168.0.2 nextcloud.14monarch.local"
                              ]
                          }
                        }
                }'


