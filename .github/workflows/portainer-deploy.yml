name: Redeploy Portainer via Docker Compose
on:
  push:
    branches:
      - main
    paths:
      - 'portainer-compose.yml'
  workflow_dispatch:
  workflow_call:
jobs:
  Deploy_Portainer_Container:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install WireGuard
        run: |
          sudo apt-get update
          sudo apt-get install -y wireguard resolvconf dnsutils
      - name: Write WireGuard config
        run: |
          echo "${{ secrets.WG_CONFIG }}" > wg0.conf
      - name: Resolve DDNS and update wg0.conf
        run: |
          ip=$(dig +short 14monarch.tplinkdns.com @8.8.8.8 | tail -n1)
          if [ -z "$ip" ]; then
          echo "❌ Failed to resolve 14monarch.tplinkdns.com"
          exit 1
          fi
          echo "✅ Resolved 14monarch.tplinkdns.com to $ip"
          sudo sed -i "s|14monarch.tplinkdns.com|$ip|" wg0.conf
          echo "🔧 Updated wg0.conf to use $ip instead of DDNS"
      - name: Bring up VPN
        run: |
          sudo wg-quick up ./wg0.conf
          sudo wg show      
      - name: Create Nginx_Network if required
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: 192.168.0.2
          username: ${{ secrets.PI_USER }}
          password: ${{ secrets.PI_PASSWORD }}
          script: |
            sudo docker network inspect nginx_network >/dev/null 2>&1 || \
            sudo docker network create \
            --label com.docker.compose.network=nginx_network \
            --driver bridge \
            --opt com.docker.network.bridge.name=nginx_network \
            nginx_network

      - name: Render Portainer compose
        run: |
          envsubst < portainer-compose.yml > portainer-compose.rendered.yml
      - name: Copy rendered compose
        uses: appleboy/scp-action@v0.1.1
        with:
          host: 192.168.0.2
          username: ${{ secrets.PI_USER }}
          password: ${{ secrets.PI_PASSWORD }}
          source: portainer-compose.rendered.yml
          target: ~/stacks/portainer/
          overwrite: true
      - name: Deploy via SSH
        id: deploy_portainer
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: 192.168.0.2
          username: ${{ secrets.PI_USER }}
          password: ${{ secrets.PI_PASSWORD }}
          script: |
            cd ~/stacks/portainer
            sudo docker compose -f portainer-compose.rendered.yml up -d
      - name: Check if Portainer Admin Is Initialized
        id: check_admin
        run: |
          echo "Waiting for Portainer API to be ready..."
          STATUS_CODE=000
          for i in {1..20}; do
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://192.168.0.2:83/api/users/admin/check || echo "000")
            if [ "$STATUS_CODE" -ne 000 ]; then
              echo "Portainer API is responding (HTTP $STATUS_CODE)"
            break
            fi
            echo "Attempt $i: Portainer not ready yet... retrying in 5s"
            sleep 5
          done

          if [ "$STATUS_CODE" -eq 000 ]; then
            echo "Portainer API did not respond after multiple retries. Failing job."
          exit 1
          fi

          if [ "$STATUS_CODE" -eq 204 ]; then
            echo "Admin account is already initialized."
            echo "admin_initialized=true" >> $GITHUB_OUTPUT
          else
            echo "Admin account is not initialized."
            echo "admin_initialized=false" >> $GITHUB_OUTPUT
          fi  
          
      - name: Initialize Admin Account
        if: steps.check_admin.outputs.admin_initialized == 'false'
        run: |
          echo "Initializing Portainer admin account..."
          curl -s -X POST "192.168.0.2:83/api/users/admin/init" \
          -H "Content-Type: application/json" \
          -d '{
              "Username": "${{ secrets.PORTAINER_USER }}", 
              "Password": "${{ secrets.PORTAINER_PASSWORD }}"
              }'

      - name: Authenticate with Portainer
        id: auth
        run: |
          RESPONSE=$(curl -s -X POST "192.168.0.2:83/api/auth" \
            -H "Content-Type: application/json" \
            -d  '{
                "Username": "${{ secrets.PORTAINER_USER }}", 
                "Password": "${{ secrets.PORTAINER_PASSWORD }}"
                }')
          TOKEN=$(echo "$RESPONSE" | grep -oP '(?<="jwt":")[^"]+')
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
      - name: Check Status
        run: |
          curl -s -X get "192.168.0.2:83/api/status" \
           -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" | jq .          
      - name: Check if Local Docker Environment Exists
        id: check_env
        run: |
         curl -s -X GET "192.168.0.2:83/api/endpoints" \
          -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" | jq .
#         EXISTS=$(echo "$ENDPOINTS" | grep -c 'unix:///var/run/docker.sock' || true)
#         if [ "$EXISTS" -gt 0 ]; then
#           echo "Local Docker environment already exists."
#           echo "env_exists=true" >> $GITHUB_OUTPUT
#         else
#          echo "env_exists=false" >> $GITHUB_OUTPUT
#         fi

      - name: Create Local Docker Environment
#        if: steps.check_env.outputs.env_exists == 'false'
        run: |
          curl -s -X POST "192.168.0.2:83/api/endpoints" \
            -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" \
            -H "Content-Type: application/json" \
            -d '{
              "Name": "local",
              "EndpointType": 1,
              "URL": "unix:///var/run/docker.sock",
              "GroupID": 1,
              "PublicURL": "",
              "TLS": false
               "EdgeCheckinInterval": 5
          }'
      
#      - name: Call Portainer webhook
#        run: |
#          curl -X POST \
#            http://portainer.14monarch.local/api/stacks/webhooks/xxxxxx
